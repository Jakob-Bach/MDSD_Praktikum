// automatically generated by Xtext
grammar edu.kit.ipd.sdq.cbsmdsl.CBSMDsl with org.eclipse.xtext.common.Terminals

import "http://sdq.ipd.kit.edu/componentBasedSystemModel/architecture" as architecture
import "http://sdq.ipd.kit.edu/componentBasedSystemModel/repository" as repository
import "http://sdq.ipd.kit.edu/componentBasedSystemModel/assembly" as assembly
import "http://sdq.ipd.kit.edu/componentBasedSystemModel/environment" as environment
import "http://sdq.ipd.kit.edu/componentBasedSystemModel/allocation" as allocation
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://sdq.ipd.kit.edu/componentBasedSystemModel/core" as core
import "http://sdq.ipd.kit.edu/componentBasedSystemModel/repository/behavior" as behavior

CompleteArchitecture returns architecture::CompleteArchitecture:
	'CompleteArchitecture'
	'{'
		'repository' repository=Repository
		'system' system=System
		'environment' environment=Environment
		'allocation' allocation=Allocation
	'}';







DataType returns repository::DataType:
	ComplexType | SimpleType;




Connector returns assembly::Connector:
	ProvidedDelegationConnector | RequiredDelegationConnector | AssemblyConnector;







Action returns behavior::Action:
	Action_Impl | InternalAction | ExternalCall | Loop | Branch;


Repository returns repository::Repository:
	{repository::Repository}
	'Repository'
	'{'
		('interfaces' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
		('components' '{' components+=Component ( "," components+=Component)* '}' )?
		('dataTypes' '{' dataTypes+=DataType ( "," dataTypes+=DataType)* '}' )?
	'}';

System returns assembly::System:
	{assembly::System}
	'System'
	'{'
		('providedRoles' '{' providedRoles+=ProvidedRole ( "," providedRoles+=ProvidedRole)* '}' )?
		('requiredRoles' '{' requiredRoles+=RequiredRole ( "," requiredRoles+=RequiredRole)* '}' )?
		('containedAssemblyContexts' '{' containedAssemblyContexts+=AssemblyContext ( "," containedAssemblyContexts+=AssemblyContext)* '}' )?
		('systemConnectors' '{' systemConnectors+=Connector ( "," systemConnectors+=Connector)* '}' )?
	'}';

Environment returns environment::Environment:
	{environment::Environment}
	'Environment'
	'{'
		('containers' '{' containers+=Container ( "," containers+=Container)* '}' )?
		('links' '{' links+=Link ( "," links+=Link)* '}' )?
	'}';

Allocation returns allocation::Allocation:
	{allocation::Allocation}
	'Allocation'
	'{'
		('allocationContexts' '{' allocationContexts+=AllocationContext ( "," allocationContexts+=AllocationContext)* '}' )?
	'}';

Interface returns repository::Interface:
	{repository::Interface}
	'Interface'
	name=EString
	'{'
		('signatures' '{' signatures+=Signature ( "," signatures+=Signature)* '}' )?
	'}';

Component returns repository::Component:
	{repository::Component}
	'Component'
	name=EString
	'{'
		('providedRoles' '{' providedRoles+=ProvidedRole ( "," providedRoles+=ProvidedRole)* '}' )?
		('requiredRoles' '{' requiredRoles+=RequiredRole ( "," requiredRoles+=RequiredRole)* '}' )?
		('behaviorDescription' behaviorDescription=BehaviorDescription)?
	'}';

EString returns ecore::EString:
	STRING | ID;

Signature returns repository::Signature:
	{repository::Signature}
	'Signature'
	name=EString
	'{'
		('returnType' returnType=[repository::DataType|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Parameter returns repository::Parameter:
	'Parameter'
	name=EString
	'{'
		'type' type=[repository::DataType|EString]
	'}';

ProvidedRole returns repository::ProvidedRole:
	'ProvidedRole'
	name=EString
	'{'
		'providedInterface' providedInterface=[repository::Interface|EString]
	'}';

RequiredRole returns repository::RequiredRole:
	'RequiredRole'
	name=EString
	'{'
		'requiredInterface' requiredInterface=[repository::Interface|EString]
	'}';

BehaviorDescription returns behavior::BehaviorDescription:
	{behavior::BehaviorDescription}
	'BehaviorDescription'
	'{'
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
	'}';

Action_Impl returns behavior::Action:
	{behavior::Action}
	'Action'
	name=EString
	'{'
		('predecessor' predecessor=[behavior::Action|EString])?
		('successor' successor=[behavior::Action|EString])?
	'}';

InternalAction returns behavior::InternalAction:
	{behavior::InternalAction}
	'InternalAction'
	name=EString
	'{'
		('predecessor' predecessor=[behavior::Action|EString])?
		('successor' successor=[behavior::Action|EString])?
	'}';

ExternalCall returns behavior::ExternalCall:
	'ExternalCall'
	name=EString
	'{'
		('predecessor' predecessor=[behavior::Action|EString])?
		('successor' successor=[behavior::Action|EString])?
		'requiredService' requiredService=[repository::Signature|EString]
		'requiredRoleOfService' requiredRoleOfService=[repository::RequiredRole|EString]
	'}';

Loop returns behavior::Loop:
	{behavior::Loop}
	'Loop'
	name=EString
	'{'
		('predecessor' predecessor=[behavior::Action|EString])?
		('successor' successor=[behavior::Action|EString])?
		('loopActions' '{' loopActions+=Action ( "," loopActions+=Action)* '}' )?
	'}';

Branch returns behavior::Branch:
	{behavior::Branch}
	'Branch'
	name=EString
	'{'
		('predecessor' predecessor=[behavior::Action|EString])?
		('successor' successor=[behavior::Action|EString])?
		('branchPaths' '{' branchPaths+=BranchPath ( "," branchPaths+=BranchPath)* '}' )?
	'}';

BranchPath returns behavior::BranchPath:
	{behavior::BranchPath}
	'BranchPath'
	name=EString
	'{'
		('pathActions' '{' pathActions+=Action ( "," pathActions+=Action)* '}' )?
	'}';

ComplexType returns repository::ComplexType:
	{repository::ComplexType}
	'ComplexType'
	name=EString;

SimpleType returns repository::SimpleType:
	'SimpleType'
	'{'
		'typeInstance' typeInstance=SimpleTypeInstance
	'}';

enum SimpleTypeInstance returns repository::SimpleTypeInstance:
				Boolean = 'Boolean' | Char = 'Char' | Date = 'Date' | Double = 'Double' | Float = 'Float' | List = 'List' | Int = 'Int' | Long = 'Long' | Map = 'Map' | String = 'String';

AssemblyContext returns assembly::AssemblyContext:
	'AssemblyContext'
	name=EString
	'{'
		'instantiatedComponent' instantiatedComponent=[repository::Component|EString]
	'}';

ProvidedDelegationConnector returns assembly::ProvidedDelegationConnector:
	'ProvidedDelegationConnector'
	name=EString
	'{'
		'innerAssemblyContext' innerAssemblyContext=[assembly::AssemblyContext|EString]
		'outerAssemblyContext' outerAssemblyContext=[assembly::AssemblyContext|EString]
		'innerProvidedRole' innerProvidedRole=[repository::ProvidedRole|EString]
		'outerProvidedRole' outerProvidedRole=[repository::ProvidedRole|EString]
	'}';

RequiredDelegationConnector returns assembly::RequiredDelegationConnector:
	'RequiredDelegationConnector'
	name=EString
	'{'
		'innerAssemblyContext' innerAssemblyContext=[assembly::AssemblyContext|EString]
		'outerAssemblyContext' outerAssemblyContext=[assembly::AssemblyContext|EString]
		'innerRequiredRole' innerRequiredRole=[repository::RequiredRole|EString]
		'outerRequiredRole' outerRequiredRole=[repository::RequiredRole|EString]
	'}';

AssemblyConnector returns assembly::AssemblyConnector:
	'AssemblyConnector'
	name=EString
	'{'
		'connectedProvidedRole' connectedProvidedRole=[repository::ProvidedRole|EString]
		'connectedRequiredRole' connectedRequiredRole=[repository::RequiredRole|EString]
		'connectedProvidedAssemblyContext' connectedProvidedAssemblyContext=[assembly::AssemblyContext|EString]
		'connectedRequiredAssemblyContext' connectedRequiredAssemblyContext=[assembly::AssemblyContext|EString]
	'}';

Container returns environment::Container:
	{environment::Container}
	'Container'
	name=EString;

Link returns environment::Link:
	'Link'
	name=EString
	'{'
		'linkedContainers' '(' linkedContainers+=[environment::Container|EString] ( "," linkedContainers+=[environment::Container|EString])* ')' 
	'}';

AllocationContext returns allocation::AllocationContext:
	'AllocationContext'
	name=EString
	'{'
		'allocatedContainer' allocatedContainer=[environment::Container|EString]
		'allocatedAssemblyContext' allocatedAssemblyContext=[assembly::AssemblyContext|EString]
	'}';
