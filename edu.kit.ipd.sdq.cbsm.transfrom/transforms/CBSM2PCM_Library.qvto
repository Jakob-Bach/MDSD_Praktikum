library CBSM2PCM_Library;

modeltype CBSM "strict" uses "http://sdq.ipd.kit.edu/componentBasedSystemModel";
modeltype PCM "strict" uses "http://palladiosimulator.org/PalladioComponentModel/5.1";

------------------------
----------core----------
------------------------

abstract mapping CBSM::core::NamedElement::NamedElement2NamedElement() :
		PCM::core::entity::NamedElement
{
	entityName := self.name;
}

------------------------------
----------repository----------
------------------------------

mapping CBSM::repository::Repository::Repository2Repository() :
		PCM::repository::Repository
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	dataTypes__Repository := self.dataTypes -> map DataType2DataType();
	interfaces__Repository := self.interfaces -> map Interface2OperationInterface();
	components__Repository := self.components -> map Component2RepositoryComponent();
}

mapping CBSM::repository::Interface::Interface2OperationInterface() :
		PCM::repository::OperationInterface
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	signatures__OperationInterface := self.signatures ->
		map Signature2OperationSignature();
}

abstract mapping CBSM::repository::Role::Role2Role() :
		PCM::repository::Role
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{

}

mapping CBSM::repository::ProvidedRole::ProvidedRole2OperationProvidedRole() :
		PCM::repository::OperationProvidedRole
inherits CBSM::repository::Role::Role2Role
{
	providedInterface__OperationProvidedRole := self.providedInterface.
		resolveone(PCM::repository::OperationInterface);
}

mapping CBSM::repository::RequiredRole::RequiredRole2OperationRequiredRole() :
		PCM::repository::OperationRequiredRole
inherits CBSM::repository::Role::Role2Role
{
	requiredInterface__OperationRequiredRole := self.requiredInterface.
		resolveone(PCM::repository::OperationInterface);
}

abstract mapping CBSM::repository::ProvidingAndRequiringElement::
			ProvidingAndRequiringElement2InterfaceProvidingRequiringEntity() :
		PCM::core::entity::InterfaceProvidingRequiringEntity
{
	providedRoles_InterfaceProvidingEntity := self.providedRoles ->
		map ProvidedRole2OperationProvidedRole();
	requiredRoles_InterfaceRequiringEntity := self.requiredRoles ->
		map RequiredRole2OperationRequiredRole();
}

mapping CBSM::repository::Component::Component2RepositoryComponent() :
		PCM::repository::RepositoryComponent
disjuncts CBSM::assembly::CompositeComponent::CompositeComponent2CompositeComponent,
		CBSM::repository::Component::Component2BasicComponent
{
	-- delegate to sub-types
}

abstract mapping CBSM::repository::Component::Component2RepositoryComponent_abstract() :
		PCM::repository::RepositoryComponent
inherits CBSM::core::NamedElement::NamedElement2NamedElement,
		CBSM::repository::ProvidingAndRequiringElement::
				ProvidingAndRequiringElement2InterfaceProvidingRequiringEntity
{

}

mapping CBSM::repository::Component::Component2BasicComponent() :
		PCM::repository::BasicComponent
inherits CBSM::repository::Component::Component2RepositoryComponent_abstract
{
	serviceEffectSpecifications__BasicComponent := self.behaviorDescriptions ->
		map ComponentBehaviorDescription2ResourceDemandingSEFF();
}

mapping CBSM::repository::Signature::Signature2OperationSignature() :
		PCM::repository::OperationSignature
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	parameters__OperationSignature := self.parameters -> map Parameter2Parameter();
	returnType__OperationSignature := self.returnType.resolveone(PCM::repository::DataType);
}

mapping CBSM::repository::Parameter::Parameter2Parameter() :
		PCM::repository::Parameter
{
	parameterName := self.name;
	dataType__Parameter := self.type.resolveone(PCM::repository::DataType);
}

mapping CBSM::repository::DataType::DataType2DataType() :
		PCM::repository::DataType
disjuncts CBSM::repository::ComplexType::ComplexType2CompositeDataType,
		CBSM::repository::SimpleType::SimpleType2PrimitiveDataType
{
	-- delegate to sub-types
}

mapping CBSM::repository::ComplexType::ComplexType2CompositeDataType() :
		PCM::repository::CompositeDataType
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	-- there is no ComplexDataType in PCM, but Composite- and CollectionDataType;
	-- we chose CompositeDataType here
}

query CBSM::repository::SimpleType::isCollectionDataType() : Boolean =
	(self.typeInstance = CBSM::repository::SimpleTypeInstance::Map or
	self.typeInstance = CBSM::repository::SimpleTypeInstance::_List);

query CBSM::repository::SimpleType::isCompositeDataType() : Boolean =
	(self.typeInstance = CBSM::repository::SimpleTypeInstance::Date);

mapping CBSM::repository::SimpleType::SimpleType2PrimitiveDataType() :
		PCM::repository::DataType
{
	init {
		if (self.isCollectionDataType() or self.isCompositeDataType()) {
			/*CollectionDataTypes have a mandatory feature "innerType" which we could
			not set, therefore CompositeDataType returned in that case, too*/
			result := object PCM::repository::CompositeDataType {};
		} else {
			result := object PCM::repository::PrimitiveDataType {};
		}
	}
	population {
		if (self.isCollectionDataType() or self.isCompositeDataType()) {
			result.oclAsType(PCM::repository::CompositeDataType).entityName :=
					self.typeInstance.toString();
		} else {
			result.oclAsType(PCM::repository::PrimitiveDataType).type :=
				if(self.typeInstance = CBSM::repository::SimpleTypeInstance::Boolean) then
					PCM::repository::PrimitiveTypeEnum::BOOL
				elif (self.typeInstance = CBSM::repository::SimpleTypeInstance::Char) then
					PCM::repository::PrimitiveTypeEnum::CHAR
				elif (self.typeInstance = CBSM::repository::SimpleTypeInstance::Double) then
					PCM::repository::PrimitiveTypeEnum::DOUBLE
				elif (self.typeInstance = CBSM::repository::SimpleTypeInstance::Float) then
					-- no direct equivalent in PCM, therefore up-cast
					PCM::repository::PrimitiveTypeEnum::DOUBLE
				elif (self.typeInstance = CBSM::repository::SimpleTypeInstance::Int) then
					PCM::repository::PrimitiveTypeEnum::INT
				elif (self.typeInstance = CBSM::repository::SimpleTypeInstance::Long) then
					PCM::repository::PrimitiveTypeEnum::LONG
				elif (self.typeInstance = CBSM::repository::SimpleTypeInstance::String) then
					PCM::repository::PrimitiveTypeEnum::STRING
			endif;
		}
	}
}

----------------------------
----------behavior----------
----------------------------

mapping CBSM::repository::behavior::BehaviorDescription::
			BehaviorDescription2ResourceDemandingBehavior() :
		PCM::seff::ResourceDemandingBehaviour
disjuncts CBSM::repository::behavior::ComponentBehaviorDescription::
			ComponentBehaviorDescription2ResourceDemandingSEFF,
		CBSM::repository::behavior::BehaviorDescription::
			BehaviorDescription2ResourceDemandingBehaviour_concrete
{
	-- delegate to sub-types
}

mapping CBSM::repository::behavior::BehaviorDescription::
			BehaviorDescription2ResourceDemandingBehaviour_concrete() :
		PCM::seff::ResourceDemandingBehaviour
{
	-- CBSM has no special start and stop elements, so create and link them
	var startAction := object pcm::seff::StartAction {
		entityName := self.name + "_Start";
	};
	var stopAction := object pcm::seff::StopAction {
		entityName := self.name + "_Stop";
	};
	var intermediateActions := self.actions -> map Action2AbstractAction();
	startAction.successor_AbstractAction := intermediateActions->first();
	stopAction.predecessor_AbstractAction := intermediateActions->last();
	steps_Behaviour += startAction;
	steps_Behaviour += intermediateActions;
	steps_Behaviour += stopAction;
}

mapping CBSM::repository::behavior::ComponentBehaviorDescription::
			ComponentBehaviorDescription2ResourceDemandingSEFF() :
		PCM::seff::ResourceDemandingSEFF
inherits CBSM::repository::behavior::BehaviorDescription::
			BehaviorDescription2ResourceDemandingBehaviour_concrete
{
	describedService__SEFF := self.providedService.
		resolveone(PCM::repository::OperationSignature);
	basicComponent_ServiceEffectSpecification := self.describedComponent.
		resolveone(PCM::repository::BasicComponent);
}

abstract mapping CBSM::repository::behavior::Action::Action2AbstractAction() :
		PCM::seff::AbstractAction
disjuncts CBSM::repository::behavior::InternalAction::InternalAction2InternalAction,
		CBSM::repository::behavior::ExternalCall::ExternalCall2ExternalCallAction,
		CBSM::repository::behavior::Loop::Loop2LoopAction,
		CBSM::repository::behavior::Branch::Branch2BranchAction
{
	-- delegate to sub-types
}

abstract mapping CBSM::repository::behavior::Action::Action2AbstractAction_abstract() :
		PCM::seff::AbstractAction
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	predecessor_AbstractAction := self.predecessor.resolveone(PCM::seff::AbstractAction);
	successor_AbstractAction := self.successor.resolveone(PCM::seff::AbstractAction);
}

mapping CBSM::repository::behavior::InternalAction::InternalAction2InternalAction() :
		PCM::seff::InternalAction
inherits CBSM::repository::behavior::Action::Action2AbstractAction_abstract
{

}

mapping CBSM::repository::behavior::ExternalCall::ExternalCall2ExternalCallAction() :
		PCM::seff::ExternalCallAction
inherits CBSM::repository::behavior::Action::Action2AbstractAction_abstract
{
	calledService_ExternalService := self.requiredService.
		resolveone(PCM::repository::OperationSignature);
	role_ExternalService := self.requiredRoleOfService.
		resolveone(PCM::repository::OperationRequiredRole);
}

mapping CBSM::repository::behavior::Loop::Loop2LoopAction() :
		PCM::seff::LoopAction
inherits CBSM::repository::behavior::Action::Action2AbstractAction_abstract
{
	bodyBehaviour_Loop := self.loopBehavior.
		map BehaviorDescription2ResourceDemandingBehavior();
	iterationCount_LoopAction := object PCM::core::PCMRandomVariable {
		specification := "1";
	};
}

-- assume equal probability for all branches
query CBSM::repository::behavior::Branch::getBranchProbability() : Real =
	1 / self.branchPaths->size();

mapping CBSM::repository::behavior::Branch::Branch2BranchAction() :
		PCM::seff::BranchAction
inherits CBSM::repository::behavior::Action::Action2AbstractAction_abstract
{
	var probability = self.getBranchProbability();
	branches_Branch := self.branchPaths -> map BranchPath2ProbabilisticBranchTransition();
	branches_Branch.oclAsType(PCM::seff::ProbabilisticBranchTransition)->forEach(path) {
		path.branchProbability := probability;
	}
}

mapping CBSM::repository::behavior::BranchPath::BranchPath2ProbabilisticBranchTransition() :
		PCM::seff::ProbabilisticBranchTransition
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	branchBehaviour_BranchTransition := self.branchBehavior.
		map BehaviorDescription2ResourceDemandingBehavior();
}

----------------------------
----------assembly----------
----------------------------

mapping CBSM::assembly::AssemblyContext::AssemblyContext2AssemblyContext() :
		PCM::core::composition::AssemblyContext
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	parentStructure__AssemblyContext := self.parentCompositeElement.
		resolveone(pcm::core::composition::ComposedStructure);
	-- mapping could be called from a CompositeComponent whose contained components
	-- are not transformed yet, therefore postpone resolving
	encapsulatedComponent__AssemblyContext := self.instantiatedComponent.
		late resolveone(pcm::repository::RepositoryComponent);
}

abstract mapping CBSM::assembly::CompositeProvidingAndRequiringElement::
			CompositeProvidingAndRequiringElement2ComposedProvidingRequiringEntity() :
		PCM::core::entity::ComposedProvidingRequiringEntity
inherits CBSM::repository::ProvidingAndRequiringElement::
		ProvidingAndRequiringElement2InterfaceProvidingRequiringEntity
{
	assemblyContexts__ComposedStructure := self.containedAssemblyContexts ->
		map AssemblyContext2AssemblyContext();
	connectors__ComposedStructure := self.connectors -> map Connector2Connector();
}

mapping CBSM::assembly::CompositeComponent::CompositeComponent2CompositeComponent() :
		PCM::repository::CompositeComponent
inherits CBSM::repository::Component::Component2RepositoryComponent_abstract,
		CBSM::assembly::CompositeProvidingAndRequiringElement::
			CompositeProvidingAndRequiringElement2ComposedProvidingRequiringEntity
{

}

mapping CBSM::assembly::System::System2System() :
		PCM::system::System
inherits CBSM::core::NamedElement::NamedElement2NamedElement,
		CBSM::assembly::CompositeProvidingAndRequiringElement::
		CompositeProvidingAndRequiringElement2ComposedProvidingRequiringEntity
{

}

mapping CBSM::assembly::Connector::Connector2Connector() :
		PCM::core::composition::Connector
disjuncts CBSM::assembly::ProvidedDelegationConnector::
			ProvidedDelegationConnector2ProvidedDelegationConnector,
		CBSM::assembly::RequiredDelegationConnector::
			RequiredDelegationConnector2RequiredDelegationConnector,
		CBSM::assembly::AssemblyConnector::AssemblyConnector2AssemblyConnector
{
	-- delegate to sub-types
}

abstract mapping CBSM::assembly::Connector::Connector2Connector_abstract() :
		PCM::core::composition::Connector
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{

}

abstract mapping CBSM::assembly::DelegationConnector::DelegationConnector2DelegationConnector() :
		PCM::core::composition::DelegationConnector
inherits CBSM::assembly::Connector::Connector2Connector_abstract
{

}

mapping CBSM::assembly::ProvidedDelegationConnector::
			ProvidedDelegationConnector2ProvidedDelegationConnector() :
		PCM::core::composition::ProvidedDelegationConnector
inherits CBSM::assembly::DelegationConnector::DelegationConnector2DelegationConnector
{
	innerProvidedRole_ProvidedDelegationConnector := self.innerProvidedRole.
		resolveone(PCM::repository::OperationProvidedRole);
	outerProvidedRole_ProvidedDelegationConnector := self.outerProvidedRole.
		resolveone(PCM::repository::OperationProvidedRole);
	assemblyContext_ProvidedDelegationConnector := self.innerAssemblyContext.
		resolveone(PCM::core::composition::AssemblyContext);
}

mapping CBSM::assembly::RequiredDelegationConnector::
			RequiredDelegationConnector2RequiredDelegationConnector() :
		PCM::core::composition::RequiredDelegationConnector
inherits CBSM::assembly::DelegationConnector::DelegationConnector2DelegationConnector
{
	innerRequiredRole_RequiredDelegationConnector := self.innerRequiredRole.
		resolveone(PCM::repository::OperationRequiredRole);
	outerRequiredRole_RequiredDelegationConnector := self.outerRequiredRole.
		resolveone(PCM::repository::OperationRequiredRole);
	assemblyContext_RequiredDelegationConnector := self.innerAssemblyContext.
		resolveone(PCM::core::composition::AssemblyContext);
}

mapping CBSM::assembly::AssemblyConnector::AssemblyConnector2AssemblyConnector() :
		PCM::core::composition::AssemblyConnector
inherits CBSM::assembly::Connector::Connector2Connector_abstract
{
	requiringAssemblyContext_AssemblyConnector := self.connectedRequiredAssemblyContext.
		resolveone(pcm::core::composition::AssemblyContext);
	providingAssemblyContext_AssemblyConnector := self.connectedProvidedAssemblyContext.
		resolveone(pcm::core::composition::AssemblyContext);
	providedRole_AssemblyConnector := self.connectedProvidedRole.
		resolveone(PCM::repository::OperationProvidedRole);
	requiredRole_AssemblyConnector := self.connectedRequiredRole.
		resolveone(PCM::repository::OperationRequiredRole);
}

-------------------------------
----------environment----------
-------------------------------

mapping CBSM::environment::Environment::Environment2ResourceEnvironment(
			defaultLinkResourceType: PCM::resourcetype::CommunicationLinkResourceType) :
		PCM::resourceenvironment::ResourceEnvironment
--inherits CBSM::core::NamedElement::NamedElement2NamedElement
-- does not work if NamedElement mapping has no parameter ("non-conformant signature")
{
	entityName := self.name;
	resourceContainer_ResourceEnvironment := self.containers ->
		map Container2ResourceContainer();
	linkingResources__ResourceEnvironment := self.links ->
		map Link2LinkingResource(defaultLinkResourceType);
}

mapping CBSM::environment::Container::Container2ResourceContainer() :
		PCM::resourceenvironment::ResourceContainer
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	resourceEnvironment_ResourceContainer := self.parentEnvironment.
		resolveone(PCM::resourceenvironment::ResourceEnvironment);
}

mapping CBSM::environment::Link::Link2LinkingResource(
			defaultLinkResourceType: PCM::resourcetype::CommunicationLinkResourceType) :
		PCM::resourceenvironment::LinkingResource
--inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	entityName := self.name;
	resourceEnvironment_LinkingResource := self.parentEnvironment.
		resolveone(PCM::resourceenvironment::ResourceEnvironment);
	connectedResourceContainers_LinkingResource := self.linkedContainers.
		resolve(PCM::resourceenvironment::ResourceContainer);
	-- no equivalent in CBSM, set some reasonable defaults (feature is required)
	communicationLinkResourceSpecifications_LinkingResource :=
		object PCM::resourceenvironment::CommunicationLinkResourceSpecification {
			failureProbability := 0.0;
			latency_CommunicationLinkResourceSpecification :=
				object PCM::core::PCMRandomVariable {
					specification := "1";
				};
			throughput_CommunicationLinkResourceSpecification :=
				object PCM::core::PCMRandomVariable {
					specification := "1";
				};
			communicationLinkResourceType_CommunicationLinkResourceSpecification :=
				defaultLinkResourceType;
		}
}

------------------------------
----------allocation----------
------------------------------

mapping CBSM::allocation::Allocation::Allocation2Allocation() :
		PCM::allocation::Allocation
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	system_Allocation := self.allocatedSystem.resolveone(pcm::system::System);
	targetResourceEnvironment_Allocation := self.allocationEnvironment.
		resolveone(pcm::resourceenvironment::ResourceEnvironment);
	allocationContexts_Allocation := self.allocationContexts ->
		map AllocationContext2AllocationContext();
}

mapping CBSM::allocation::AllocationContext::AllocationContext2AllocationContext() :
		PCM::allocation::AllocationContext
inherits CBSM::core::NamedElement::NamedElement2NamedElement
{
	assemblyContext_AllocationContext := self.allocatedAssemblyContext.
		resolveone(PCM::core::composition::AssemblyContext);
	resourceContainer_AllocationContext := self.allocatedContainer.
		resolveone(PCM::resourceenvironment::ResourceContainer);
}
